
---------------------------------------------------------------------------------
Development - application architecture has been identified and most of the
              functionality has been completed.  The remaining work is listed
              below. Note that DATA and DOMAIN projects are mostly complete
              and will like require minimum changes going forward.  
              
- Need to introduce users
- Need to be able to add new Cards, Colleges, People, and Teams
- Need to be able to add, edit, and delete Products
- Need to be able to add/remove card to/from a Product
- Need to be able to add search results to a Product

---------------------------------------------------------------------------------
Quinlan.MVC - The MVC website is mostly complete.  It  requires some cleanup 
              with regard to logging exceptions and styling of views.   

Controllers

    CardsController - add methods to Create
    CollegesController - add methods to Create
    PeopleController - add methods to Create
    ProductsController - add methods for Create/Edit/Details
    TeamsController - add methods to Create

Models

    CardCreate
    CollegeCreate
    PersonCreate
    ProductViewModel
    ProductCreate
    ProductDetails
    ProductEdit
    TeamCreate

Services

    CardCreateService
    CardEditService (incomplete)
    CollegeCreateService
    PersonCreateService
    ProductCreateService
    ProductDetailsService
    ProductEditService
    ProductFormService
    TeamCreateService
 
 Views

    Cards
    - Create
    - Edit

    Colleges
    - Create

    People
    - Create

    Products
    - Create
    - Details
    - Edit

    Teams
    - Create

---------------------------------------------------------------------------------
Quinlan.SPA - The Single Page Application is just getting started.  I have a
              functioning component in the ClientApp that requests it's data
              from an API method which uses an injected service to retrieve
              data from the domain.

              Note that the Web API is being developed as part of the SPA
              because it is intended to be custom to the SPA.  

1) Add filtering options to each of the card list pages

2) People Index and Team Index pages

3) Replace usage of IDs in urls with Identifiers (for readability)


---------------------------------------------------------------------------------
Unit Testing - much of the unit testing has been identified but only about 
               a third of those tests have been written.  The remaining work
               is itemized below.

Research

- Should there be one TEST project?  Or one each for DATA, DOMAIN, MVC, etc?
- Need a more complete process of seeding the data for tests.  MOQ?
- How should I test controllers in the MVC website and API?
- How should I client-side functionality? With what?
- Do I need integration testing with Selinium or the like?

---------------------------------------------------------------------------------
Quinlan.Test - need to identify specific tests for Domain, MVC, and API tests.


Data Services

    CollectibleDataServiceTests 

    - Insert_Succeeds
    - Update_Succeeds
    - Update_WithInvalidId_Fails
    - Delete_Succeeds
    - Delete_WithInvalidId_Fails
    - Delete_Imported_Fails

    CollegeDataServiceTests

    - Insert_Succeeds
    - Update_Succeeds
    - Update_WithInvalidId_Fails
    - Delete_Succeeds
    - Delete_WithInvalidId_Fails
    - Delete_Imported_Fails
    
    PersonDataServiceTests

    - Insert_Succeeds
    - Update_Succeeds
    - Update_WithInvalidId_Fails
    - Delete_Succeeds
    - Delete_WithInvalidId_Fails
    - Delete_Imported_Fails

    ProductDataServiceTests
    
    - Insert_Succeeds
    - Update_Succeeds
    - Update_WithInvalidId_Fails
    - Delete_Succeeds
    - Delete_WithInvalidId_Fails
    - Delete_Imported_Fails

    TeamDataServiceTests
    
    - Insert_Succeeds
    - Update_Succeeds
    - Update_WithInvalidId_Fails
    - Delete_Succeeds
    - Delete_WithInvalidId_Fails
    - Delete_Imported_Fails

Query Services

    ProductQueryServiceTest 

    - Execute_WithSportFilter_Succeeds
    - Execute_WithLeagueFilter_Succeeds
    - Execute_WithTeamFilter_Succeeds
    - Execute_WithPersonFilter_Succeeds
    - Execute_WithCollegeFilter_Succeeds
    - Execute_WithNotableFilter_Succeeds
    - Execute_WithHeismanFilter_Succeeds
    - Execute_WithHOFFilter_Succeeds
    - Execute_WithGradedFilter_Succeeds 
    - Execute_WithRCFilter_Succeeds 
    - Execute_WithRelicFilter_Succeeds 

Domain Models

    - Need to test ToString() method for each domain data class

Domain CRUD Services

    CardServiceTests
    CollegeServiceTests
    FigurineServiceTests       
    MagazineServiceTests       
    PersonServiceTests   
    ProduceServiceTest
    ProductSearchServiceTest
    TeamServiceTest

Domain Search Services      

    CardSearchServiceTests     
    FigurineSearchServiceTests 
    MagazineSearchServiceTests 
    PersonSearchServiceTests   
    TeamSearchServiceTests     

Domain Helper Services

    QueryFilterServiceTests    

MVC Form Services

    PersonFormServiceTests

MVC Helper Services

    MvcServiceTests
    SearchFilterTests

MVC Page Services

    CardDetailsServiceTests   
    FigurineIndexServiceTests 
    HomePageServiceTests     
    LeagueDetailsServiceTests 
    MagazineIndexServiceTests 
    PersonDetailsServiceTests 
    PersonEditServiceTests
    PersonIndexServiceTests  
    SportDetailsServiceTests  
    TeamDetailsServiceTests   
    TeamIndexServiceTests    

API Service

    SportsApiServiceTests




